#version: '3.9'

services:
  postgresql:
    container_name: postgresql
    image: postgres:latest
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  redis-stack:
    image: redis/redis-stack
    container_name: redis-stack
    restart: always
    environment:
      REDIS_ARGS: "--requirepass systempass"
    ports:
      - 6379:6379
      - 8001:8001

  zookeeper:
    image: wurstmeister/zookeeper:latest
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka:latest
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: "false"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - eureka

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  eureka:
    image: whdrb2643/codeterian-eureka:latest
    container_name: codeterian-eureka
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=eureka
    ports:
      - "19090:19090"
    network_mode: host

  gateway:
    image: whdrb2643/codeterian-gateway:latest
    container_name: codeterian-gateway
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=gateway
    ports:
      - "19091:19091"
    network_mode: host
    depends_on:
      - eureka

  order:
    image: whdrb2643/codeterian-order:latest
    container_name: codeterian-order
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=order
    ports:
      - "19095:19095"
    network_mode: host
    depends_on:
      - postgresql
      - redis-stack
      - kafka
      - kafka-ui
      - zookeeper
      - eureka

  performance:
    image: whdrb2643/codeterian-performance:latest
    container_name: codeterian-performance
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=performance
    ports:
      - "19093:19093"
    network_mode: host
    depends_on:
      - postgresql
      - kafka
      - kafka-ui
      - zookeeper
      - eureka
      - elasticsearch

  ticket:
    image: whdrb2643/codeterian-ticket:latest
    container_name: codeterian-ticket
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=ticket
    ports:
      - "19094:19094"
    network_mode: host
    depends_on:
      - postgresql
      - kafka
      - kafka-ui
      - zookeeper
      - eureka

  payment:
    image: whdrb2643/codeterian-payment:latest
    container_name: codeterian-payment
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=payment
    ports:
        - "19096:19096"
    network_mode: host
    depends_on:
      - postgresql
      - kafka
      - kafka-ui
      - zookeeper
      - eureka

  user:
    image: whdrb2643/codeterian-user:latest
    container_name: codeterian-user
    build:
      dockerfile: Dockerfile
      args:
        - FILE_DIRECTORY=user
    ports:
      - "19097:19097"
    network_mode: host
    depends_on:
      - postgresql
      - eureka

volumes:
  elasticsearch-data: